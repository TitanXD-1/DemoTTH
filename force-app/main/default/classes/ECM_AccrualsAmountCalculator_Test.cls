@isTest
public class ECM_AccrualsAmountCalculator_Test {
    @isTest 
    public static void createOutletContractTest(){
        List<Account> acclist = new List<Account>();
        Profile prof = [select id from profile where name=: 'Sales Representative'];
        User usrmngr = new User();
        usrmngr.firstName = 'testManager';
        usrmngr.lastName = 't2';
        usrmngr.profileId = prof.id;        
        usrmngr.email = 'test.Mamager@test.com';
        usrmngr.Username ='testcmMngr@test.com';
        usrmngr.Alias='test';
        usrmngr.Timezonesidkey='America/Los_Angeles';
        usrmngr.LocaleSidKey='en_US';
        usrmngr.LanguageLocaleKey='en_US';
        usrmngr.EmailEncodingKey='UTF-8';
        usrmngr.Available_Countries__c='ES';
        insert usrmngr;
        system.assert(usrmngr.Id != null,'usrmngr Id should not be null');
        User usr = new User();
        usr.firstName = 'test1';
        usr.lastName = 'test2';
        usr.profileId = prof.id;        
        usr.email = 'test@test.com';
        usr.Username ='testcm123@test.com';
        usr.Alias='test';
        usr.Timezonesidkey='America/Los_Angeles';
        usr.LocaleSidKey='en_US';
        usr.LanguageLocaleKey='en_US';
        usr.EmailEncodingKey='UTF-8';
        usr.Available_Countries__c='ES';
        usr.ManagerId = usrmngr.Id;
        insert usr;
        
        user newuser = EDGE_UtilityTestClass.runAsUser('Testabc','System Administrator');
        insert newuser;
        Id geographyId = EDGE_UtilityTestClass.setupCountry('ES');     
        
        //Id geographyId1 = EDGE_UtilityTestClass.setupCountry('AU'); 
        Territory__c testterritory=New Territory__c();
        testterritory.Name='Testterriotory';
        testterritory.Territory_Type__c='Sales';
        testterritory.Country__c= geographyId;
        testterritory.Status__c='Active';
        testterritory.Primary_Sales_Rep__c = usr.id;
        insert testterritory;
        
        ECM_Contract_Type__c contractType=new ECM_Contract_Type__c();
        contractType.Name='Promotional';
        contractType.Geography__c=geographyId;
        contractType.ECM_Abbreviation__c='POM';
        contractType.ECM_Automatic_approval_amount_threshold__c=40.00;
        contractType.ECM_Screen_3_field_configuration__c = 'Investment';
        insert contractType;
        
        Market_Setting__c mktSetting =EDGE_UtilityTestClass.getMarketSetting(geographyId);
         mktSetting.ECM_Tiering_Payment_Amount_Calculation__c = 'Top-Level Achievement';
        insert mktSetting;
        //String bannerRecordTypeId = Pick_Up_Options__c.sObjectType.getDescribe().getRecordTypeInfosByName().get('Banner').getRecordTypeId();
        String bRecordTypeId = Pick_Up_Options__c.sObjectType.getDescribe().getRecordTypeInfosByName().get('Budget Type').getRecordTypeId();
        
        Pick_Up_Options__c bannerAU= new Pick_Up_Options__c();
        bannerAU.Name='A&P [ES]';
        bannerAU.Geography__c=geographyId;
        bannerAU.RecordTypeId=BRecordTypeId;
        insert bannerAU;
        Pick_Up_Options__c budjectEU= new Pick_Up_Options__c();
        budjectEU.Name='TI [ES]';
        budjectEU.Geography__c=geographyId;
        budjectEU.RecordTypeId=bRecordTypeId;
        insert budjectEU;
        
        Account outletAccount = EDGE_UtilityTestClass.getOutletRecord();
        outletAccount.Person_Responsible__c= usr.Id;
        outletAccount.OwnerId = usr.Id;
        outletAccount.SAP_Sold_to__c='3984021';
        outletAccount.VAT_Number__c='TAXID123';
        outletAccount.ECM_Legal_Name__c='Legal';
        outletAccount.Country__c = geographyId;
        outletAccount.IsOperator__c=true;
        insert outletAccount;
        
        String accRecordTypeId = Account.sObjectType.getDescribe().getRecordTypeInfosByName().get('Outlet').getRecordTypeId();         
        Account outlet = new Account();
        outlet.RecordTypeId = accRecordTypeId;
        outlet.Name = 'Test_Outlet_Business';
        outlet.BillingStreet = '29 african Highway 45';
        outlet.BillingCity = 'Barcelona';
        outlet.IsOperator__c=true;
        outlet.BillingState = 'SEVILLA';
        outlet.BillingPostalCode = '4100';
        outlet.BillingCountry = 'Spain';
        outlet.BillingCountryCode = 'ES';
        outlet.Outlet_Email_Address__c = 'test@test.com';
        outlet.Global_Channel__c = 'Off Trade';
        outlet.Global_Sub_Channel__c = 'Retailer';
        outlet.Global_Segment__c = 'Hypermarket';
        outlet.Global_Sub_Segment__c = 'Modern Hypermarket';
        outlet.Status__c= 'Active';
        insert outlet;  
        Account outletAccount1 = EDGE_UtilityTestClass.getOutletRecord();
        outletAccount1.Name = 'Test_Outlet1';
        outletAccount1.BillingStreet = '17 Asian Highway 45';
        outletAccount1.BillingCity = 'Sydney';
        outletAccount1.IsOperator__c=true;
        outletAccount1.BillingState = 'South Australia';
        outletAccount1.BillingPostalCode = '5668';
        outletAccount1.BillingCountry = 'Australia';
        outletAccount1.BillingCountryCode = 'AU';
        outletAccount1.Outlet_Email_Address__c = 'test1@test.com';
        outletAccount1.Email_for_contracts_payments__c = 'test1@test.com';
        outletAccount1.Global_Channel__c = 'Off Trade';
        outletAccount1.Global_Sub_Channel__c = 'Retailer';
        outletAccount1.Global_Segment__c = 'Hypermarket';
        outletAccount1.Global_Sub_Segment__c = 'Modern Hypermarket';
        outletAccount1.Status__c= 'Active';
        insert outletAccount1;
        
        Territory__c  territory = EDGE_UtilityTestClass.getTerritoryRec();
        insert territory;
        Territory_Hierarchy__c hirarchy= ECM_UtilityTestClass.createhirarchy(geographyId);
        insert hirarchy;
        territory.Primary_Sales_Rep__c = usr.id;
        update territory;
        
        String contractRecordTypeId = Contract.sObjectType.getDescribe().getRecordTypeInfosByName().get('Outlet').getRecordTypeId();
        Contract objContract = EDGE_UtilityTestClass.getContract(outletAccount.Id, contractRecordTypeId);
        objContract.Status = 'Draft';
        objContract.AccountId=outletAccount.Id;
        objContract.ECM_Territory__c=testterritory.Id;
        objContract.ECM_Agreement_Type__c=contractType.Id;
        objContract.ECM_Duration__c = 4;
        objContract.recordTypeId=contractRecordTypeId;
        objContract.ECM_Channel__c='On-Premise';
       // objContract.ECM_Banner__c=bannerAU.Id;
        objContract.StartDate = system.today()-10;
        objContract.Contract_End_Date__c = system.today()+360;
        insert objContract;
        
        Contract objContract2 = EDGE_UtilityTestClass.getContract(outletAccount.Id, contractRecordTypeId);
        objContract2.Status = 'Draft';
        objContract2.Contract_End_Date__c = System.today()+29;
        objContract2.AccountId=outletAccount.Id;
        objContract2.ECM_Territory__c=testterritory.Id;
        objContract2.recordTypeId=contractRecordTypeId;
        objContract2.ECM_Channel__c='On-Premise';
        objContract2.ECM_Duration__c = 6;
        objContract2.StartDate = system.today()-150;
        objContract2.ECM_Agreement_Type__c=contractType.Id;
        insert objContract2;
        
        Contract objContract3 = EDGE_UtilityTestClass.getContract(outletAccount.Id, contractRecordTypeId);
        objContract3.Status = 'Draft';
        objContract3.AccountId=outletAccount.Id;
        objContract3.ECM_Territory__c=testterritory.Id;
        objContract3.recordTypeId=contractRecordTypeId;
        objContract3.ECM_Channel__c='On-Premise';
        objContract3.ECM_Duration__c = 8;
        objContract3.StartDate = system.today().toStartOfMonth();
        objContract3.Contract_End_Date__c = system.today()+150;
        insert objContract3;
        
        Contract objContract4 = EDGE_UtilityTestClass.getContract(outlet.Id, contractRecordTypeId);
        objContract4.Status = 'Draft';
        objContract4.AccountId=outlet.Id;
        objContract4.ECM_Territory__c=testterritory.Id;
        objContract4.recordTypeId=contractRecordTypeId;
        objContract4.ECM_Channel__c='On-Premise';
        objContract4.ECM_Duration__c = 8;
        objContract4.StartDate = system.today().toStartOfMonth();
        objContract4.Contract_End_Date__c = system.today()+150;
        insert objContract4;

        //string recordTypeId =Product__c.sObjectType.getDescribe().getRecordTypeInfosByName().get('Brand Variant').getRecordTypeId();
        Product__c productRec = new Product__c();
        productRec.Name='Johnny Walker Black Label';
        productRec.UPIID__c='12345';
        productRec.Product_Full_Name__c = 'New Product';
        productRec.Diageo_Cost__c = 10;
        productRec.A_P_Cost__c =10;
        productRec.POS_Related_Brand__c='JW';
        productRec.Units_per_POS__c= 10;
        productRec.Outlet_Cost__c=10;
        productRec.Pricing_Type__c = 'By Unit';
        productRec.Limit_Per_Order__c=10;
        productRec.POS_Related_Item__c='JW';
        productRec.Product_Code__c='test234';
        productRec.SAP_IO_Number__c='Sample';
        productRec.POS_Item_Short_Description__c='This is good item';
        productRec.Start_Date__c = system.today();   
        productRec.Country__c=geographyId;
        insert productRec;
        
        Product_UOM__c prdtUOM = new Product_UOM__c();
        prdtUOM.Product__c = productRec.Id;
        prdtUOM.Type__c = 'BTL';
        prdtUOM.Conversion_Factor__c = 2;
        prdtUOM.Unique_ID__c = 'JBL';
        insert prdtUOM;
        
        Market_Assortment_Product__c marketassort = new Market_Assortment_Product__c();
        marketassort.Product__c=productRec.Id;
        marketassort.Market_Assortment__c=geographyId;
		marketassort.Base_UoM__c = 'BTL';  
        //Marketassort.ECM_Strategy__c='2';
        insert marketassort;
        
        List<ECM_Contract_Item__c> contractItemslist = new List<ECM_Contract_Item__c>();        
        ECM_Contract_Item__c newcontractitem= new ECM_Contract_Item__c();
        newcontractitem.ECM_Contract__c=objContract.Id;
        newcontractitem.ECM_Product__c=marketassort.id;
        newcontractitem.ECM_Investment__c  =200;
        newcontractitem.ECM_UoM__c = String.valueOf(10);
        insert newcontractitem;
        contractItemslist.add(newcontractitem);
        ECM_Contract_Item__c newcontractitem1= new ECM_Contract_Item__c();
        newcontractitem1.ECM_Contract__c=objContract3.Id;
        newcontractitem1.ECM_Product__c=marketassort.id;
        newcontractitem1.ECM_Investment__c =200;
        newcontractitem1.ECM_UoM__c = String.valueOf(20);
        insert newcontractitem1;
        contractItemslist.add(newcontractitem1);
        ECM_Contract_Item__c newcontractitem2= new ECM_Contract_Item__c();
        newcontractitem2.ECM_Contract__c=objContract2.Id;
        newcontractitem2.ECM_Product__c=marketassort.id;
        newcontractitem2.ECM_Investment__c =200;
        newcontractitem2.ECM_UOM__c = String.valueOf(10);
        insert newcontractitem2;
        ECM_Contract_Item__c newcontractitem3= new ECM_Contract_Item__c();
        newcontractitem3.ECM_Contract__c=objContract4.Id;
        newcontractitem3.ECM_Product__c=marketassort.id;
        newcontractitem3.ECM_Investment__c =200;
        newcontractitem3.ECM_UOM__c = String.valueOf(10);
        insert newcontractitem3;
      //  Territory_Budget__c terri_Budget = ECM_UtilityTestClass.createTerritoryBudget(territory.Id, hirarchy.Id);
       // insert terri_Budget;
        Territory_Budget__c terriBudget1 = ECM_UtilityTestClass.createTerritoryBudget(territory.Id, hirarchy.Id);
        terriBudget1.ECM_Budget_Type__c=budjectEU.Id;
       // insert terriBudget1;
        ECM_Sales_Driver__c salesDriver = ECM_UtilityTestClass.getSalesdriver(terriBudget1.Id,geographyId);
        SalesDriver.ECM_Budget_Type__c = budjectEU.Id;
        insert SalesDriver;
        ECM_Sales_Driver__c salesDriver1 = ECM_UtilityTestClass.getSalesdriver(terriBudget1.Id,geographyId);
        salesDriver1.ECM_Budget_Type__c = bannerAU.Id;
        insert salesDriver1;        
        ECM_Sales_Driver_Item__c eSCDI = new ECM_Sales_Driver_Item__c(Contract__c=objContract2.Id,ECM_Sales_Driver__c=SalesDriver.Id);
        insert eSCDI;
        ECM_Sales_Driver_Item__c eSCDI1 = new ECM_Sales_Driver_Item__c(Contract__c=objContract2.Id,ECM_Sales_Driver__c=SalesDriver1.Id);
        insert eSCDI1;
        //ECM_Sales_Driver_Item__c ESCDI2 = new ECM_Sales_Driver_Item__c(Contract__c=objContract4.Id,ECM_Sales_Driver__c=SalesDriver1.Id);
        //insert ESCDI2;
        List<ECM_Sales_Driver_Item_Detail__c> lstsalesdriverdetails = new List<ECM_Sales_Driver_Item_Detail__c>();
        lstsalesdriverdetails.add(ECM_UtilityTestClass.insertSalesdriverDetails(eSCDI, newcontractitem1));     
        lstsalesdriverdetails.add(ECM_UtilityTestClass.insertSalesdriverDetails(eSCDI1, newcontractitem1));
        lstsalesdriverdetails.add(ECM_UtilityTestClass.insertSalesdriverDetails(eSCDI1, newcontractitem2));
        //lstsalesdriverdetails.add(ECM_UtilityTestClass.insertSalesdriverDetails(ESCDI2, newcontractitem3));
        insert lstsalesdriverdetails;
        List<ECM_Sales_Driver_Item__c> eSDList = new List<ECM_Sales_Driver_Item__c>();
        eSDList.add(ESCDI);
        List<Depletions__c> lstdpletn = new List<Depletions__c>();
        Depletions__c dep = new Depletions__c();
        dep.ECM_Volume__c = 100.00;
        dep.ECM_Start_Period__c = system.today().toStartOfMonth();
        dep.ECM_End_Period__c = system.today().toStartOfMonth()+27;
        dep.ECM_Product__c = productRec.id;
        dep.ECM_Outlet__c = outletAccount.Id;
        dep.ECM_UoM__c = '9L';
        lstdpletn.add(dep);
        Depletions__c dep1 = new Depletions__c();
        dep1.ECM_Volume__c = 10.00;
        dep1.ECM_Start_Period__c = system.today().toStartOfMonth();
        dep1.ECM_End_Period__c = system.today().toStartOfMonth().addmonths(1).addDays(-2);
        dep1.ECM_Product__c = productRec.id;
        dep1.ECM_Outlet__c = outletAccount.Id;
        dep1.ECM_UoM__c = 'BTL';
        lstdpletn.add(dep1);
        Depletions__c dep2 = new Depletions__c();
        dep2.ECM_Volume__c = 10.00;
        dep2.ECM_Start_Period__c = system.today().toStartOfMonth();
        dep2.ECM_End_Period__c = system.today().toStartOfMonth().addmonths(1).addDays(-1);
        dep2.ECM_Product__c = productRec.id;
        dep2.ECM_Outlet__c = outlet.Id;
        dep2.ECM_UoM__c = 'BTL';
        lstdpletn.add(dep2);
        insert lstdpletn;
        acclist.add(outletAccount1);
        //Date lastDate = system.today().addmonths(-1);
        integer periodval =  system.today().month();
        
        string fiscal = ECM_AccrualsAmountCalculator.FiscalYear(system.today().toStartOfMonth().addmonths(-1),system.today().toStartOfMonth().addDays(-1)).removeEndIgnoreCase('/');
        system.debug(LoggingLevel.Debug,'fiscal-='+fiscal);
        integer periodval1=0;
        if(periodval>6){
            periodval1 = (periodval-7)+1;
        }else{
            periodval1 = periodval+6;
        }
        ECM_Tiering__c tier;
        tier = ECM_CreateContractController.createTieringRecord(newcontractitem1.Id, 10, 1, 20, 2, 30, 3);

        ECM_Tiering__c tier2;
        tier2 = ECM_CreateContractController.createTieringRecord(newcontractitem.Id, 5, 1, 10, 2,15, 3);
        ECM_Contract_Item_Analysis__c contAns = new ECM_Contract_Item_Analysis__c();
        contAns.ECM_Budget_Type_Name__c  = terriBudget1.Name ;
        contAns.ECM_Contract_Status__c = 'Draft'; 
        contAns.ECM_Product_Name__c = 'Test';
        contAns.ECM_Fiscal_Year__c = fiscal;
        contAns.ECM_Agreement_Type_Name__c=newcontractitem1.ECM_Contract__r.ECM_Agreement_Type__r.Name;
        contAns.CurrencyIsoCode= newcontractitem1.CurrencyIsoCode;
        contAns.Amount_Without_Tax__c = 20;
        contAns.ECM_Contract_Item__c = newcontractitem1.Id;
        contAns.ECM_Contract_Item_ID__c = newcontractitem1.Id;
        contAns.ECM_Sales_Org__c = newcontractitem1.ECM_Contract__r.Account.Sales_Org__c;
        contAns.ECM_SAP_sold_to__c = newcontractitem1.ECM_Contract__r.Account.SAP_Sold_to__c;          
        contAns.ECM_INTO_Material__c = String.valueOf(newcontractitem1.ECM_Product__r.ECM_INTO_Material__c);
        contAns.ECM_Period__c = 'P'+String.valueOf(periodval1-1);
        contAns.ECM_Internal_Order__c = 'iiut812t8';
        contAns.ECM_Territory__c = newcontractitem1.ECM_Contract__r.ECM_Territory__r.Name;
        contAns.ECM_Territory_Hierarchy__c = newcontractitem1.ECM_Contract__r.ECM_Territory__r.Sales_Area__r.Name;
        contAns.ECM_Concept__c= newcontractitem1.ECM_Contract__r.ContractNumber;
        insert contAns;
        Date lastmonth = system.today().addMonths(-1);
        Test.setCreatedDate(contAns.Id, lastmonth); 
        ECM_AccrualsAmountCalculator.FiscalYear(Date.newInstance(system.today().year(), 5, 17), Date.newInstance(system.today().year()+1, 7, 17));
        Test.startTest();
        ECM_ContractItemAnalysisInsert_Batch btch = new ECM_ContractItemAnalysisInsert_Batch();
        Database.executeBatch(btch);
        Test.stopTest();
    }
}