//
// Generated by JSON2Apex http://json2apex.herokuapp.com/
//
// The supplied json has fields with names that are not valid in apex
// and so can only be parsed with explicitly generated code, this option
// was auto selected for you.
/**
* @name : D1_DCHResponse
* @description : Parser Class for parsing DCH Response
* @history :
* VERSION          AUTHOR                  DATE            DETAIL
* 1.0              Kapil Baliyan           01/09/2022      Initial Development (NCP-5611)
*/
@SuppressWarnings('PMD, PMD.ExcessiveClassLength, PMD.NcssConstructorCount, PMD.ExcessivePublicCount')
public class D1_DCHResponse {
    
    public class Properties_V {
        public String DRM_RightsProfile_Name {get;set;} // in json: DRM.RightsProfile.Name
        public String DRM_RightsProfile_StartDate {get;set;} // in json: DRM.RightsProfile.StartDate
        public String DRM_RightsProfile_CalculatedExpirationDate {get;set;} // in json: DRM.RightsProfile.CalculatedExpirationDate
        
        public Properties_V(JSONParser parser) {
            while (parser.nextToken() != System.JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
                        if (text == 'DRM.RightsProfile.Name') {
                            DRM_RightsProfile_Name = parser.getText();
                        } else if (text == 'DRM.RightsProfile.StartDate') {
                            DRM_RightsProfile_StartDate = parser.getText();
                        } else if (text == 'DRM.RightsProfile.CalculatedExpirationDate') {
                            DRM_RightsProfile_CalculatedExpirationDate = parser.getText();
                        } else {
                            System.debug(LoggingLevel.WARN, 'Properties_V consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    public class Properties_W {
        public String GalleryName {get;set;} 
        public String GalleryDescription {get;set;} 
        
        public Properties_W(JSONParser parser) {
            while (parser.nextToken() != System.JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
                        if (text == 'GalleryName') {
                            GalleryName = parser.getText();
                        } else if (text == 'GalleryDescription') {
                            GalleryDescription = parser.getText();
                        } else {
                            System.debug(LoggingLevel.WARN, 'Properties_W consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    public class Description {
        public String en_US {get;set;} // in json: en-US
        
        public Description(JSONParser parser) {
            while (parser.nextToken() != System.JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
                        if (text == 'en-US') {
                            en_US = parser.getText();
                        } else {
                            System.debug(LoggingLevel.WARN, 'Description consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    public class Properties_Z {
        public Description TaxonomyLabel {get;set;} 
        public String LevelIdentifier {get;set;} 
        
        public Properties_Z(JSONParser parser) {
            while (parser.nextToken() != System.JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
                        if (text == 'TaxonomyLabel') {
                            TaxonomyLabel = new Description(parser);
                        } else if (text == 'LevelIdentifier') {
                            LevelIdentifier = parser.getText();
                        } else {
                            System.debug(LoggingLevel.WARN, 'Properties_Z consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    public class Parent {
        public Properties_Y properties {get;set;} 
        public String href {get;set;} 
        
        public Parent(JSONParser parser) {
            while (parser.nextToken() != System.JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
                        if (text == 'properties') {
                            properties = new Properties_Y(parser);
                        } else if (text == 'href') {
                            href = parser.getText();
                        } else {
                            System.debug(LoggingLevel.WARN, 'Parent consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    public class Properties_X {
        public Description TaxonomyLabel {get;set;} 
        
        public Properties_X(JSONParser parser) {
            while (parser.nextToken() != System.JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
                        if (text == 'TaxonomyLabel') {
                            TaxonomyLabel = new Description(parser);
                        } else {
                            System.debug(LoggingLevel.WARN, 'Properties_X consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    public class Parents {
        public Properties_Z properties {get;set;} 
        public String href {get;set;} 
        
        public Parents(JSONParser parser) {
            while (parser.nextToken() != System.JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
                        if (text == 'properties') {
                            properties = new Properties_Z(parser);
                        } else if (text == 'href') {
                            href = parser.getText();
                        } else {
                            System.debug(LoggingLevel.WARN, 'Parents consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    public class Properties_Y {
        public Description Label {get;set;} 
        
        public Properties_Y(JSONParser parser) {
            while (parser.nextToken() != System.JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
                        if (text == 'Label') {
                            Label = new Description(parser);
                        } else {
                            System.debug(LoggingLevel.WARN, 'Properties_Y consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    public class Values {
        public String value {get;set;} 
        public String label {get;set;} 
        
        public Values(JSONParser parser) {
            while (parser.nextToken() != System.JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
                        if (text == 'value') {
                            value = parser.getText();
                        } else if (text == 'label') {
                            label = parser.getText();
                        } else {
                            System.debug(LoggingLevel.WARN, 'Values consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    public class OccasionOrSeason {
        public String identifier {get;set;} 
        public Description labels {get;set;} 
        
        public OccasionOrSeason(JSONParser parser) {
            while (parser.nextToken() != System.JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
                        if (text == 'identifier') {
                            identifier = parser.getText();
                        } else if (text == 'labels') {
                            labels = new Description(parser);
                        } else {
                            System.debug(LoggingLevel.WARN, 'OccasionOrSeason consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    public String query {get;set;} 
    public Integer skip {get;set;} 
    public Integer take {get;set;} 
    public Integer totalItemCount {get;set;} 
    public Integer returnedItemCount {get;set;} 
    public Sorting sorting {get;set;} 
    public List<Labels> sortingOptions {get;set;} 
    public List<Filters> filters {get;set;} 
    public List<Labels> fulltext {get;set;} 
    public List<Labels> facets {get;set;} 
    public List<Items> items {get;set;} 
    public Object aggregations {get;set;} 
    public Object grouped_view {get;set;} 
    
    public D1_DCHResponse(JSONParser parser) {
        
        while (parser.nextToken() != System.JSONToken.END_OBJECT) {
            if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
                String text = parser.getText();
                if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
                    if (text == 'query') {
                        query = parser.getText();
                    } else if (text == 'skip') {
                        skip = parser.getIntegerValue();
                    } else if (text == 'take') {
                        take = parser.getIntegerValue();
                    } else if (text == 'totalItemCount') {
                        totalItemCount = parser.getIntegerValue();
                    } else if (text == 'returnedItemCount') {
                        returnedItemCount = parser.getIntegerValue();
                    } else if (text == 'sorting') {
                        sorting = new Sorting(parser);
                    } else if (text == 'sortingOptions') {
                        sortingOptions = arrayOfLabels(parser);
                    } else if (text == 'filters') {
                        filters = arrayOfFilters(parser);
                    } else if (text == 'fulltext') {
                        fulltext = arrayOfLabels(parser);
                    } else if (text == 'facets') {
                        facets = arrayOfLabels(parser);
                    } else if (text == 'items') {
                        items = arrayOfItems(parser);
                    } else if (text == 'aggregations') {
                        aggregations = parser.readValueAs(Object.class);
                    } else if (text == 'grouped_view') {
                        grouped_view = parser.readValueAs(Object.class);
                    } else {
                        System.debug(LoggingLevel.WARN, 'D1_DCHResponse consuming unrecognized property: '+text);
                        consumeObject(parser);
                    }
                }
            }
        }
        
    }
    
    public class Self {
        public String href {get;set;} 
        
        public Self(JSONParser parser) {
            while (parser.nextToken() != System.JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
                        if (text == 'href') {
                            href = parser.getText();
                        } else {
                            System.debug(LoggingLevel.WARN, 'Self consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    public class Properties {
        public String FileName {get;set;} 
        public String Title {get;set;} 
        public Description Description {get;set;} 
        public String Keywords {get;set;} 
        public List<OccasionOrSeason> OccasionOrSeason {get;set;} 
        public List<OccasionOrSeason> Language {get;set;} 
        public String Comments {get;set;} 
        public String MIMEType {get;set;} 
        public String UsageSummary {get;set;} 
        public String UsageURL {get;set;} 
        public String PublicationDate {get;set;} 
        public String SmartBrandLegacyAssetID {get;set;} 
        public String SmartApproveLegacyProjectID {get;set;} 
        public String MigratedSmartBrandData {get;set;} 
        public String SmartbrandLegacyTaxonomyData {get;set;} 
        public String SmartbrandLegacyLightboxes {get;set;} 
        public OccasionOrSeason UsageRightsType {get;set;} 
        public String CostofRenegotiation {get;set;} 
        public String ApprovedBy {get;set;} 
        public String ApprovalDate {get;set;} 
        
        public Properties(JSONParser parser) {
            while (parser.nextToken() != System.JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
                        if (text == 'FileName') {
                            FileName = parser.getText();
                        } else if (text == 'Title') {
                            Title = parser.getText();
                        } else if (text == 'Description') {
                            Description = new Description(parser);
                        } else if (text == 'Keywords') {
                            Keywords = parser.getText();
                        } else if (text == 'OccasionOrSeason') {
                            OccasionOrSeason = arrayOfOccasionOrSeason(parser);
                        } else if (text == 'Language') {
                            Language = arrayOfOccasionOrSeason(parser);
                        } else if (text == 'Comments') {
                            Comments = parser.getText();
                        } else if (text == 'MIMEType') {
                            MIMEType = parser.getText();
                        } else if (text == 'UsageSummary') {
                            UsageSummary = parser.getText();
                        } else if (text == 'UsageURL') {
                            UsageURL = parser.getText();
                        } else if (text == 'PublicationDate') {
                            PublicationDate = parser.getText();
                        } else if (text == 'SmartBrandLegacyAssetID') {
                            SmartBrandLegacyAssetID = parser.getText();
                        } else if (text == 'SmartApproveLegacyProjectID') {
                            SmartApproveLegacyProjectID = parser.getText();
                        } else if (text == 'MigratedSmartBrandData') {
                            MigratedSmartBrandData = parser.getText();
                        } else if (text == 'SmartbrandLegacyTaxonomyData') {
                            SmartbrandLegacyTaxonomyData = parser.getText();
                        } else if (text == 'SmartbrandLegacyLightboxes') {
                            SmartbrandLegacyLightboxes = parser.getText();
                        } else if (text == 'UsageRightsType') {
                            UsageRightsType = new OccasionOrSeason(parser);
                        } else if (text == 'CostofRenegotiation') {
                            CostofRenegotiation = parser.getText();
                        } else if (text == 'ApprovedBy') {
                            ApprovedBy = parser.getText();
                        } else if (text == 'ApprovalDate') {
                            ApprovalDate = parser.getText();
                        } else {
                            System.debug(LoggingLevel.WARN, 'Properties consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    public class DRM_RightsProfile_RightsProfileToAsset {
        public List<Parents_X> parents {get;set;} 
        public Boolean inherits_security {get;set;} 
        public Self self {get;set;} 
        
        public DRM_RightsProfile_RightsProfileToAsset(JSONParser parser) {
            while (parser.nextToken() != System.JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
                        if (text == 'parents') {
                            parents = arrayOfParents_X(parser);
                        } else if (text == 'inherits_security') {
                            inherits_security = parser.getBooleanValue();
                        } else if (text == 'self') {
                            self = new Self(parser);
                        } else {
                            System.debug(LoggingLevel.WARN, 'DRM_RightsProfile_RightsProfileToAsset consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    public class Filters {
        public String name {get;set;} 
        public String label {get;set;} 
        public String type {get;set;} 
        public List<Values> values {get;set;} 
        public List<Labels> nested_values {get;set;} 
        public String definition {get;set;} 
        public String operator {get;set;} 
        public String removeQuery {get;set;} 
        public Boolean dynamic {get;set;} 
        public Boolean nested {get;set;} 
        public String group_Z {get;set;} // in json: group
        public Boolean visible {get;set;} 
        public Boolean multi_select {get;set;} 
        
        public Filters(JSONParser parser) {
            while (parser.nextToken() != System.JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
                        if (text == 'name') {
                            name = parser.getText();
                        } else if (text == 'label') {
                            label = parser.getText();
                        } else if (text == 'type') {
                            type = parser.getText();
                        } else if (text == 'values') {
                            values = arrayOfValues(parser);
                        } else if (text == 'nested_values') {
                            nested_values = arrayOfLabels(parser);
                        } else if (text == 'definition') {
                            definition = parser.getText();
                        } else if (text == 'operator') {
                            operator = parser.getText();
                        } else if (text == 'removeQuery') {
                            removeQuery = parser.getText();
                        } else if (text == 'dynamic') {
                            dynamic = parser.getBooleanValue();
                        } else if (text == 'nested') {
                            nested = parser.getBooleanValue();
                        } else if (text == 'group') {
                            group_Z = parser.getText();
                        } else if (text == 'visible') {
                            visible = parser.getBooleanValue();
                        } else if (text == 'multi_select') {
                            multi_select = parser.getBooleanValue();
                        } else {
                            System.debug(LoggingLevel.WARN, 'Filters consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    public class CategoryToAsset_Z {
        public Description values {get;set;} 
        public String entity {get;set;} 
        public String definition {get;set;} 
        
        public CategoryToAsset_Z(JSONParser parser) {
            while (parser.nextToken() != System.JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
                        if (text == 'values') {
                            values = new Description(parser);
                        } else if (text == 'entity') {
                            entity = parser.getText();
                        } else if (text == 'definition') {
                            definition = parser.getText();
                        } else {
                            System.debug(LoggingLevel.WARN, 'CategoryToAsset_Z consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    public class GalleryToAsset {
        public List<Parents_Y> parents {get;set;} 
        public Boolean inherits_security {get;set;} 
        public Self self {get;set;} 
        
        public GalleryToAsset(JSONParser parser) {
            while (parser.nextToken() != System.JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
                        if (text == 'parents') {
                            parents = arrayOfParents_Y(parser);
                        } else if (text == 'inherits_security') {
                            inherits_security = parser.getBooleanValue();
                        } else if (text == 'self') {
                            self = new Self(parser);
                        } else {
                            System.debug(LoggingLevel.WARN, 'GalleryToAsset consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    public class AssetTypeToAsset {
        public Parent parent {get;set;} 
        public Boolean inherits_security {get;set;} 
        public Self self {get;set;} 
        
        public AssetTypeToAsset(JSONParser parser) {
            while (parser.nextToken() != System.JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
                        if (text == 'parent') {
                            parent = new Parent(parser);
                        } else if (text == 'inherits_security') {
                            inherits_security = parser.getBooleanValue();
                        } else if (text == 'self') {
                            self = new Self(parser);
                        } else {
                            System.debug(LoggingLevel.WARN, 'AssetTypeToAsset consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    public class CategoryToAsset {
        public List<Parents> parents {get;set;} 
        public Boolean inherits_security {get;set;} 
        public Self self {get;set;} 
        
        public CategoryToAsset(JSONParser parser) {
            while (parser.nextToken() != System.JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
                        if (text == 'parents') {
                            parents = arrayOfParents(parser);
                        } else if (text == 'inherits_security') {
                            inherits_security = parser.getBooleanValue();
                        } else if (text == 'self') {
                            self = new Self(parser);
                        } else {
                            System.debug(LoggingLevel.WARN, 'CategoryToAsset consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    public class Parents_Y {
        public Properties_W properties {get;set;} 
        public String href {get;set;} 
        
        public Parents_Y(JSONParser parser) {
            while (parser.nextToken() != System.JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
                        if (text == 'properties') {
                            properties = new Properties_W(parser);
                        } else if (text == 'href') {
                            href = parser.getText();
                        } else {
                            System.debug(LoggingLevel.WARN, 'Parents_Y consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    public class Items {
        public String id {get;set;} 
        public String identifier {get;set;} 
        public List<String> cultures {get;set;} 
        public Properties properties {get;set;} 
        public Relations relations {get;set;} 
        public Created_by created_by {get;set;} 
        public String created_on {get;set;} 
        public Created_by modified_by {get;set;} 
        public String modified_on {get;set;} 
        public Created_by entitydefinition {get;set;} 
        public Created_by copy {get;set;} 
        public Created_by permissions {get;set;} 
        public Created_by lifecycle {get;set;} 
        public Created_by saved_selections {get;set;} 
        public Created_by roles {get;set;} 
        public Created_by annotations {get;set;} 
        public Boolean is_root_taxonomy_item {get;set;} 
        public Boolean is_path_root {get;set;} 
        public Boolean inherits_security {get;set;} 
        public Boolean is_system_owned {get;set;} 
        public Integer version {get;set;} 
        public Self full {get;set;} 
        public Self self {get;set;} 
        public Related_paths related_paths {get;set;} 
        public Renditions renditions {get;set;} 
        
        public Items(JSONParser parser) {
            while (parser.nextToken() != System.JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
                        if (text == 'id') {
                            id = parser.getText();
                        } else if (text == 'identifier') {
                            identifier = parser.getText();
                        } else if (text == 'cultures') {
                            cultures = arrayOfString(parser);
                        } else if (text == 'properties') {
                            properties = new Properties(parser);
                        } else if (text == 'relations') {
                            relations = new Relations(parser);
                        } else if (text == 'created_by') {
                            created_by = new Created_by(parser);
                        } else if (text == 'created_on') {
                            created_on = parser.getText();
                        } else if (text == 'modified_by') {
                            modified_by = new Created_by(parser);
                        } else if (text == 'modified_on') {
                            modified_on = parser.getText();
                        } else if (text == 'entitydefinition') {
                            entitydefinition = new Created_by(parser);
                        } else if (text == 'copy') {
                            copy = new Created_by(parser);
                        } else if (text == 'permissions') {
                            permissions = new Created_by(parser);
                        } else if (text == 'lifecycle') {
                            lifecycle = new Created_by(parser);
                        } else if (text == 'saved_selections') {
                            saved_selections = new Created_by(parser);
                        } else if (text == 'roles') {
                            roles = new Created_by(parser);
                        } else if (text == 'annotations') {
                            annotations = new Created_by(parser);
                        } else if (text == 'is_root_taxonomy_item') {
                            is_root_taxonomy_item = parser.getBooleanValue();
                        } else if (text == 'is_path_root') {
                            is_path_root = parser.getBooleanValue();
                        } else if (text == 'inherits_security') {
                            inherits_security = parser.getBooleanValue();
                        } else if (text == 'is_system_owned') {
                            is_system_owned = parser.getBooleanValue();
                        } else if (text == 'version') {
                            version = parser.getIntegerValue();
                        } else if (text == 'full') {
                            full = new Self(parser);
                        } else if (text == 'self') {
                            self = new Self(parser);
                        } else if (text == 'related_paths') {
                            related_paths = new Related_paths(parser);
                        } else if (text == 'renditions') {
                            renditions = new Renditions(parser);
                        } else {
                            System.debug(LoggingLevel.WARN, 'Items consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    public class Parents_X {
        public Properties_V properties {get;set;} 
        public String href {get;set;} 
        
        public Parents_X(JSONParser parser) {
            while (parser.nextToken() != System.JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
                        if (text == 'properties') {
                            properties = new Properties_V(parser);
                        } else if (text == 'href') {
                            href = parser.getText();
                        } else {
                            System.debug(LoggingLevel.WARN, 'Parents_X consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    public class Created_by {
        public String href {get;set;} 
        public String title {get;set;} 
        
        public Created_by(JSONParser parser) {
            while (parser.nextToken() != System.JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
                        if (text == 'href') {
                            href = parser.getText();
                        } else if (text == 'title') {
                            title = parser.getText();
                        } else {
                            System.debug(LoggingLevel.WARN, 'Created_by consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    public class CreatedForMarketToAsset {
        public List<Parents_Z> parents {get;set;} 
        public Boolean inherits_security {get;set;} 
        public Self self {get;set;} 
        
        public CreatedForMarketToAsset(JSONParser parser) {
            while (parser.nextToken() != System.JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
                        if (text == 'parents') {
                            parents = arrayOfParents_Z(parser);
                        } else if (text == 'inherits_security') {
                            inherits_security = parser.getBooleanValue();
                        } else if (text == 'self') {
                            self = new Self(parser);
                        } else {
                            System.debug(LoggingLevel.WARN, 'CreatedForMarketToAsset consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    public class Parents_Z {
        public Properties_X properties {get;set;} 
        public String href {get;set;} 
        
        public Parents_Z(JSONParser parser) {
            while (parser.nextToken() != System.JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
                        if (text == 'properties') {
                            properties = new Properties_X(parser);
                        } else if (text == 'href') {
                            href = parser.getText();
                        } else {
                            System.debug(LoggingLevel.WARN, 'Parents_Z consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    public class MasterFile {
        public List<Self> children {get;set;} 
        public Boolean inherits_security {get;set;} 
        public Self self {get;set;} 
        
        public MasterFile(JSONParser parser) {
            while (parser.nextToken() != System.JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
                        if (text == 'children') {
                            children = arrayOfSelf(parser);
                        } else if (text == 'inherits_security') {
                            inherits_security = parser.getBooleanValue();
                        } else if (text == 'self') {
                            self = new Self(parser);
                        } else {
                            System.debug(LoggingLevel.WARN, 'MasterFile consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    public class ReportingSystemToAsset {
        public List<Labels> parents {get;set;} 
        public Boolean inherits_security {get;set;} 
        public Self self {get;set;} 
        
        public ReportingSystemToAsset(JSONParser parser) {
            while (parser.nextToken() != System.JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
                        if (text == 'parents') {
                            parents = arrayOfLabels(parser);
                        } else if (text == 'inherits_security') {
                            inherits_security = parser.getBooleanValue();
                        } else if (text == 'self') {
                            self = new Self(parser);
                        } else {
                            System.debug(LoggingLevel.WARN, 'ReportingSystemToAsset consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    public class Related_paths {
        public List<List<CategoryToAsset_Z>> CategoryToAsset {get;set;} 
        public List<List<CategoryToAsset_Z>> Diageo_PortalToAsset {get;set;} // in json: Diageo.PortalToAsset
        public List<List<CategoryToAsset_Z>> AssetTypeToAsset {get;set;} 
        public List<List<CategoryToAsset_Z>> CreatorMarketToAsset {get;set;} 
        public List<List<CategoryToAsset_Z>> CreatedForMarketToAsset {get;set;} 
        public List<List<CategoryToAsset_Z>> AvailableToToAsset {get;set;} 
        
        public Related_paths(JSONParser parser) {
            while (parser.nextToken() != System.JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
                        if (text == 'CategoryToAsset') {
                            CategoryToAsset = arrayOfList(parser);
                        } else if (text == 'Diageo.PortalToAsset') {
                            Diageo_PortalToAsset = arrayOfList(parser);
                        } else if (text == 'AssetTypeToAsset') {
                            AssetTypeToAsset = arrayOfList(parser);
                        } else if (text == 'CreatorMarketToAsset') {
                            CreatorMarketToAsset = arrayOfList(parser);
                        } else if (text == 'CreatedForMarketToAsset') {
                            CreatedForMarketToAsset = arrayOfList(parser);
                        } else if (text == 'AvailableToToAsset') {
                            AvailableToToAsset = arrayOfList(parser);
                        } else {
                            System.debug(LoggingLevel.WARN, 'Related_paths consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    public class Renditions {
        public List<Self> downloadOriginal {get;set;} 
        public List<Self> metadata {get;set;} 
        public List<Self> downloadPreview {get;set;} 
        public List<Self> thumbnail {get;set;} 
        
        public Renditions(JSONParser parser) {
            while (parser.nextToken() != System.JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
                        if (text == 'downloadOriginal') {
                            downloadOriginal = arrayOfSelf(parser);
                        } else if (text == 'metadata') {
                            metadata = arrayOfSelf(parser);
                        } else if (text == 'downloadPreview') {
                            downloadPreview = arrayOfSelf(parser);
                        } else if (text == 'thumbnail') {
                            thumbnail = arrayOfSelf(parser);
                        } else {
                            System.debug(LoggingLevel.WARN, 'Renditions consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    public class Labels {
        
        public Labels(JSONParser parser) {
            while (parser.nextToken() != System.JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
                        {
                            System.debug(LoggingLevel.WARN, 'Labels consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    public class Relations {
        public CategoryToAsset CategoryToAsset {get;set;} 
        public AssetTypeToAsset AssetTypeToAsset {get;set;} 
        public CreatedForMarketToAsset CreatedForMarketToAsset {get;set;} 
        public Self TagToAsset {get;set;} 
        public GalleryToAsset GalleryToAsset {get;set;} 
        public ReportingSystemToAsset ReportingSystemToAsset {get;set;} 
        public DRM_RightsProfile_RightsProfileToAsset DRM_RightsProfile_RightsProfileToAsset {get;set;} // in json: DRM.RightsProfile.RightsProfileToAsset
        public Self RecipeToAsset {get;set;} 
        public MasterFile MasterFile {get;set;} 
        
        public Relations(JSONParser parser) {
            while (parser.nextToken() != System.JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
                        if (text == 'CategoryToAsset') {
                            CategoryToAsset = new CategoryToAsset(parser);
                        } else if (text == 'AssetTypeToAsset') {
                            AssetTypeToAsset = new AssetTypeToAsset(parser);
                        } else if (text == 'CreatedForMarketToAsset') {
                            CreatedForMarketToAsset = new CreatedForMarketToAsset(parser);
                        } else if (text == 'TagToAsset') {
                            TagToAsset = new Self(parser);
                        } else if (text == 'GalleryToAsset') {
                            GalleryToAsset = new GalleryToAsset(parser);
                        } else if (text == 'ReportingSystemToAsset') {
                            ReportingSystemToAsset = new ReportingSystemToAsset(parser);
                        } else if (text == 'DRM.RightsProfile.RightsProfileToAsset') {
                            DRM_RightsProfile_RightsProfileToAsset = new DRM_RightsProfile_RightsProfileToAsset(parser);
                        } else if (text == 'RecipeToAsset') {
                            RecipeToAsset = new Self(parser);
                        } else if (text == 'MasterFile') {
                            MasterFile = new MasterFile(parser);
                        } else {
                            System.debug(LoggingLevel.WARN, 'Relations consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    public class Sorting {
        public String name {get;set;} 
        public Labels labels {get;set;} 
        public Boolean asc_Z {get;set;} // in json: asc
        
        public Sorting(JSONParser parser) {
            while (parser.nextToken() != System.JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
                        if (text == 'name') {
                            name = parser.getText();
                        } else if (text == 'labels') {
                            labels = new Labels(parser);
                        } else if (text == 'asc') {
                            asc_Z = parser.getBooleanValue();
                        } else {
                            System.debug(LoggingLevel.WARN, 'Sorting consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    
    public static D1_DCHResponse parse(String json) {
        System.JSONParser parser = System.JSON.createParser(json);
        return new D1_DCHResponse(parser);
    }
    
    public static void consumeObject(System.JSONParser parser) {
        Integer depth = 0;
        do {
            System.JSONToken curr = parser.getCurrentToken();
            if (curr == System.JSONToken.START_OBJECT || 
                curr == System.JSONToken.START_ARRAY) {
                    depth++;
                } else if (curr == System.JSONToken.END_OBJECT ||
                           curr == System.JSONToken.END_ARRAY) {
                               depth--;
                           }
        } while (depth > 0 && parser.nextToken() != null);
    }
    
    
    
    private static List<Parents_Z> arrayOfParents_Z(System.JSONParser p) {
        List<Parents_Z> res = new List<Parents_Z>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Parents_Z(p));
        }
        return res;
    }
    
    
    
    
    
    
    
    
    private static List<CategoryToAsset_Z> arrayOfCategoryToAsset_Z(System.JSONParser p) {
        List<CategoryToAsset_Z> res = new List<CategoryToAsset_Z>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new CategoryToAsset_Z(p));
        }
        return res;
    }
    
    
    private static List<Filters> arrayOfFilters(System.JSONParser p) {
        List<Filters> res = new List<Filters>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Filters(p));
        }
        return res;
    }
    
    
    
    
    
    
    
    private static List<Parents> arrayOfParents(System.JSONParser p) {
        List<Parents> res = new List<Parents>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Parents(p));
        }
        return res;
    }
    
    
    
    
    private static List<OccasionOrSeason> arrayOfOccasionOrSeason(System.JSONParser p) {
        List<OccasionOrSeason> res = new List<OccasionOrSeason>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new OccasionOrSeason(p));
        }
        return res;
    }
    
    
    
    
    
    private static List<Values> arrayOfValues(System.JSONParser p) {
        List<Values> res = new List<Values>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Values(p));
        }
        return res;
    }
    
    
    
    
    
    
    
    
    
    
    private static List<Labels> arrayOfLabels(System.JSONParser p) {
        List<Labels> res = new List<Labels>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Labels(p));
        }
        return res;
    }
    
    
    
    private static List<Items> arrayOfItems(System.JSONParser p) {
        List<Items> res = new List<Items>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Items(p));
        }
        return res;
    }
    
    
    
    
    
    
    private static List<Parents_Y> arrayOfParents_Y(System.JSONParser p) {
        List<Parents_Y> res = new List<Parents_Y>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Parents_Y(p));
        }
        return res;
    }
    
    
    private static List<String> arrayOfString(System.JSONParser p) {
        List<String> res = new List<String>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(p.getText());
        }
        return res;
    }
    
    
    
    private static List<List<CategoryToAsset_Z>> arrayOfList(System.JSONParser p) {
        List<List<CategoryToAsset_Z>> res = new List<List<CategoryToAsset_Z>>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(arrayOfCategoryToAsset_Z(p));
        }
        return res;
    }
    
    
    private static List<Self> arrayOfSelf(System.JSONParser p) {
        List<Self> res = new List<Self>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Self(p));
        }
        return res;
    }
    
    
    
    
    private static List<Parents_X> arrayOfParents_X(System.JSONParser p) {
        List<Parents_X> res = new List<Parents_X>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Parents_X(p));
        }
        return res;
    }
    
    
    
    
}